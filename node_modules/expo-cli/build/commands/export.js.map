{"version":3,"sources":["../../src/commands/export.ts"],"names":["pipeline","stream","downloadAndDecompressAsync","url","destination","downloadStream","got","on","tar","extract","cwd","action","projectDir","options","publicUrl","CommandError","outputPath","path","resolve","outputDir","overwrite","force","fs","existsSync","question","type","name","message","outputBundlesDir","outputAssetsDir","outputAndroidJson","outputiOSJson","removeSync","dev","UrlUtils","isHttps","validator","isURL","protocols","console","warn","exportOptions","dumpAssetmap","dumpSourcemap","isDev","publishOptions","resetCache","clear","target","absoluteOutputDir","process","Project","exportForAppHosting","assetUrl","mergeSrcDirs","mergeSrcUrl","length","tmpFolder","join","remove","ensureDir","downloadDecompressPromises","map","uniqFilename","basename","crypto","randomBytes","toString","tmpFolderUncompressed","push","Promise","all","mergeSrcDir","srcDirs","concat","mergeAppDistributions","collect","val","memo","program","command","description","helpGroup","option","asyncActionProjectDir","checkConfig"],"mappings":"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","sourcesContent":["import { ProjectTarget, getDefaultTarget } from '@expo/config';\nimport { Project, UrlUtils } from '@expo/xdl';\nimport { Command } from 'commander';\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport got from 'got';\nimport path from 'path';\nimport stream from 'stream';\nimport tar from 'tar';\nimport { promisify } from 'util';\nimport validator from 'validator';\n\nimport CommandError from '../CommandError';\nimport log from '../log';\nimport prompt, { Question } from '../prompt';\nimport { createProgressTracker } from './utils/progress';\n\nconst pipeline = promisify(stream.pipeline);\n\n/**\n * Download a tar.gz file and extract it to a folder.\n *\n * @param url remote URL to download.\n * @param destination destination folder to extract the tar to.\n */\nasync function downloadAndDecompressAsync(url: string, destination: string): Promise<string> {\n  const downloadStream = got.stream(url).on('downloadProgress', createProgressTracker());\n\n  await pipeline(downloadStream, tar.extract({ cwd: destination }));\n  return destination;\n}\n\ntype Options = {\n  outputDir: string;\n  assetUrl: string;\n  publicUrl?: string;\n  mergeSrcUrl: string[];\n  mergeSrcDir: string[];\n  dev: boolean;\n  clear: boolean;\n  quiet: boolean;\n  target?: ProjectTarget;\n  dumpAssetmap: boolean;\n  dumpSourcemap: boolean;\n  maxWorkers?: number;\n  force: boolean;\n};\n\nexport async function action(projectDir: string, options: Options) {\n  if (!options.publicUrl) {\n    throw new CommandError('MISSING_PUBLIC_URL', 'Missing required option: --public-url');\n  }\n  const outputPath = path.resolve(projectDir, options.outputDir);\n  let overwrite = options.force;\n  if (fs.existsSync(outputPath)) {\n    if (!overwrite) {\n      const question: Question = {\n        type: 'confirm',\n        name: 'action',\n        message: `Output directory ${outputPath} already exists.\\nThe following files and directories will be overwritten if they exist:\\n- ${options.outputDir}/bundles\\n- ${options.outputDir}/assets\\n- ${options.outputDir}/ios-index.json\\n- ${options.outputDir}/android-index.json\\nWould you like to continue?`,\n      };\n\n      const { action } = await prompt(question);\n      if (action) {\n        overwrite = true;\n      } else {\n        throw new CommandError(\n          'OUTPUT_DIR_EXISTS',\n          `Output directory ${outputPath} already exists. Aborting export.`\n        );\n      }\n    }\n    if (overwrite) {\n      log(`Removing old files from ${outputPath}`);\n      const outputBundlesDir = path.resolve(outputPath, 'bundles');\n      const outputAssetsDir = path.resolve(outputPath, 'assets');\n      const outputAndroidJson = path.resolve(outputPath, 'android-index.json');\n      const outputiOSJson = path.resolve(outputPath, 'ios-index.json');\n      if (fs.existsSync(outputBundlesDir)) {\n        fs.removeSync(outputBundlesDir);\n      }\n      if (fs.existsSync(outputAssetsDir)) {\n        fs.removeSync(outputAssetsDir);\n      }\n      if (fs.existsSync(outputAndroidJson)) {\n        fs.removeSync(outputAndroidJson);\n      }\n      if (fs.existsSync(outputiOSJson)) {\n        fs.removeSync(outputiOSJson);\n      }\n    }\n  }\n\n  // If we are not in dev mode, ensure that url is https\n  if (!options.dev && !UrlUtils.isHttps(options.publicUrl)) {\n    throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n  } else if (!validator.isURL(options.publicUrl, { protocols: ['http', 'https'] })) {\n    console.warn(`Dev Mode: publicUrl ${options.publicUrl} does not conform to HTTP format.`);\n  }\n\n  // Make outputDir an absolute path if it isnt already\n  const exportOptions = {\n    dumpAssetmap: options.dumpAssetmap,\n    dumpSourcemap: options.dumpSourcemap,\n    isDev: options.dev,\n    publishOptions: {\n      resetCache: !!options.clear,\n      target: options.target ?? getDefaultTarget(projectDir),\n    },\n  };\n  const absoluteOutputDir = path.resolve(process.cwd(), options.outputDir);\n  await Project.exportForAppHosting(\n    projectDir,\n    options.publicUrl,\n    options.assetUrl,\n    absoluteOutputDir,\n    exportOptions\n  );\n\n  // Merge src dirs/urls into a multimanifest if specified\n  const mergeSrcDirs: string[] = [];\n\n  // src urls were specified to merge in, so download and decompress them\n  if (options.mergeSrcUrl.length > 0) {\n    // delete .tmp if it exists and recreate it anew\n    const tmpFolder = path.resolve(projectDir, path.join('.tmp'));\n    await fs.remove(tmpFolder);\n    await fs.ensureDir(tmpFolder);\n\n    // Download the urls into a tmp dir\n    const downloadDecompressPromises = options.mergeSrcUrl.map(\n      async (url: string): Promise<void> => {\n        // Add the absolute paths to srcDir\n        const uniqFilename = `${path.basename(url, '.tar.gz')}_${crypto\n          .randomBytes(16)\n          .toString('hex')}`;\n\n        const tmpFolderUncompressed = path.resolve(tmpFolder, uniqFilename);\n        await fs.ensureDir(tmpFolderUncompressed);\n        await downloadAndDecompressAsync(url, tmpFolderUncompressed);\n        // add the decompressed folder to be merged\n        mergeSrcDirs.push(tmpFolderUncompressed);\n      }\n    );\n\n    await Promise.all(downloadDecompressPromises);\n  }\n\n  // add any local src dirs to be merged\n  mergeSrcDirs.push(...options.mergeSrcDir);\n\n  if (mergeSrcDirs.length > 0) {\n    const srcDirs = options.mergeSrcDir.concat(options.mergeSrcUrl).join(' ');\n    log(`Starting project merge of ${srcDirs} into ${options.outputDir}`);\n\n    // Merge app distributions\n    await Project.mergeAppDistributions(\n      projectDir,\n      [...mergeSrcDirs, options.outputDir], // merge stuff in srcDirs and outputDir together\n      options.outputDir\n    );\n    log(`Project merge was successful. Your merged files can be found in ${options.outputDir}`);\n  }\n  log(`Export was successful. Your exported files can be found in ${options.outputDir}`);\n}\n\nfunction collect<T>(val: T, memo: T[]): T[] {\n  memo.push(val);\n  return memo;\n}\n\nexport default function (program: Command) {\n  program\n    .command('export [path]')\n    .description('Export the static files of the app for hosting it on a web server')\n    .helpGroup('core')\n    .option('-p, --public-url <url>', 'The public url that will host the static files. (Required)')\n    .option(\n      '--output-dir <dir>',\n      'The directory to export the static files to. Default directory is `dist`',\n      'dist'\n    )\n    .option(\n      '-a, --asset-url <url>',\n      \"The absolute or relative url that will host the asset files. Default is './assets', which will be resolved against the public-url.\",\n      './assets'\n    )\n    .option('-d, --dump-assetmap', 'Dump the asset map for further processing.')\n    .option('--dev', 'Configure static files for developing locally using a non-https server')\n    .option('-f, --force', 'Overwrite files in output directory without prompting for confirmation')\n    .option('-s, --dump-sourcemap', 'Dump the source map for debugging the JS bundle.')\n    .option('-q, --quiet', 'Suppress verbose output.')\n    .option(\n      '-t, --target [env]',\n      'Target environment for which this export is intended. Options are `managed` or `bare`.'\n    )\n    .option('--merge-src-dir [dir]', 'A repeatable source dir to merge in.', collect, [])\n    .option(\n      '--merge-src-url [url]',\n      'A repeatable source tar.gz file URL to merge in.',\n      collect,\n      []\n    )\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .asyncActionProjectDir(action, { checkConfig: true });\n}\n"],"file":"export.js"}