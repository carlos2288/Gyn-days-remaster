{"version":3,"sources":["../../../src/commands/start/TerminalUI.ts"],"names":["CTRL_C","CTRL_D","CTRL_L","bold","b","italic","i","underline","u","chalk","clearConsole","process","stdout","write","platform","printHelp","PLATFORM_TAG","ProjectUtils","getPlatformTag","log","newLine","nested","printUsage","projectDir","options","dev","ProjectSettings","readAsync","openDevToolsAtStartup","UserSettings","getAsync","username","UserManager","getCurrentUsernameAsync","devMode","androidInfo","iosInfo","webInfo","platformInstructions","filter","Boolean","map","instructions","join","webOnly","printServerInfo","Webpack","printConnectionInstructions","url","UrlUtils","constructManifestUrlAsync","urlOpts","printQRCode","wrap","columns","wrapItem","item","text","trimStart","startAsync","projectRoot","stdin","startWaitingForCommand","setRawMode","resume","setEncoding","on","handleKeypress","stopWaitingForCommand","removeListener","Simulator","setInteractiveCallback","pause","Android","setInteractiveAuthenticationCallback","key","openWebProjectAsync","shouldPrompt","nonInteractive","red","openProjectAsync","lanAddress","hostType","defaultRecipient","rl","readline","createInterface","input","output","chr","name","cleanup","cancel","close","addListener","question","sendTo","trim","sent","Exp","sendAsync","err","setAsync","emit","openAsync","devToolsPort","readPackagerInfoAsync","enabled","projectSettings","minify","reset","Project","authSession","getSessionAsync","accessToken","yellow","sessionSecret","logoutAsync","e","error"],"mappings":"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","sourcesContent":["import {\n  Android,\n  Exp,\n  Project,\n  ProjectSettings,\n  ProjectUtils,\n  Simulator,\n  UrlUtils,\n  UserManager,\n  UserSettings,\n  Webpack,\n} from '@expo/xdl';\nimport chalk from 'chalk';\nimport openBrowser from 'react-dev-utils/openBrowser';\nimport readline from 'readline';\nimport wordwrap from 'wordwrap';\n\nimport { loginOrRegisterIfLoggedOutAsync } from '../../accounts';\nimport log from '../../log';\nimport urlOpts from '../../urlOpts';\nimport { startProjectInEditorAsync } from '../utils/EditorUtils';\n\nconst CTRL_C = '\\u0003';\nconst CTRL_D = '\\u0004';\nconst CTRL_L = '\\u000C';\n\nconst { bold: b, italic: i, underline: u } = chalk;\n\ntype StartOptions = {\n  reset?: boolean;\n  nonInteractive?: boolean;\n  nonPersistent?: boolean;\n  maxWorkers?: number;\n  webOnly?: boolean;\n};\n\nconst clearConsole = (): void => {\n  process.stdout.write(process.platform === 'win32' ? '\\x1Bc' : '\\x1B[2J\\x1B[3J\\x1B[H');\n};\n\nconst printHelp = (): void => {\n  const PLATFORM_TAG = ProjectUtils.getPlatformTag('Expo');\n  log.newLine();\n  log.nested(`${PLATFORM_TAG} Press ${b('?')} to show a list of all available commands.`);\n};\n\nconst printUsage = async (projectDir: string, options: Pick<StartOptions, 'webOnly'> = {}) => {\n  const { dev } = await ProjectSettings.readAsync(projectDir);\n  const openDevToolsAtStartup = await UserSettings.getAsync('openDevToolsAtStartup', true);\n  const username = await UserManager.getCurrentUsernameAsync();\n  const devMode = dev ? 'development' : 'production';\n  const androidInfo = `${b`a`} to run on ${u`A`}ndroid (${b`shift+a`} to select the device/emulator)`;\n  const iosInfo =\n    process.platform === 'darwin'\n      ? `${b`i`} to run on ${u`i`}OS simulator (${b`shift+i`} to select the simulator model)`\n      : '';\n  const webInfo = `${b`w`} to run on ${u`w`}eb`;\n  const platformInstructions = [androidInfo, iosInfo, webInfo]\n    .filter(Boolean)\n    .map(instructions => ` \\u203A Press ${instructions}.`)\n    .join('\\n');\n  log.nested(`\n${platformInstructions}\n \\u203A Press ${b`c`} to show info on ${u`c`}onnecting new devices.\n \\u203A Press ${b`d`} to open DevTools in the default web browser.\n \\u203A Press ${b`shift-d`} to ${\n    openDevToolsAtStartup ? 'disable' : 'enable'\n  } automatically opening ${u`D`}evTools at startup.${\n    options.webOnly ? '' : `\\n \\u203A Press ${b`e`} to send an app link with ${u`e`}mail.`\n  }\n \\u203A Press ${b`p`} to toggle ${u`p`}roduction mode. (current mode: ${i(devMode)})\n \\u203A Press ${b`r`} to ${u`r`}estart bundler, or ${b`shift-r`} to restart and clear cache.\n \\u203A Press ${b`o`} to ${u`o`}pen the project in your editor.\n \\u203A Press ${b`s`} to ${u`s`}ign ${\n    username ? `out. (Signed in as ${i('@' + username)}.)` : 'in.'\n  }\n`);\n};\n\nexport const printServerInfo = async (\n  projectDir: string,\n  options: Pick<StartOptions, 'webOnly'> = {}\n) => {\n  if (options.webOnly) {\n    Webpack.printConnectionInstructions(projectDir);\n    printHelp();\n    return;\n  }\n  const url = await UrlUtils.constructManifestUrlAsync(projectDir);\n  const username = await UserManager.getCurrentUsernameAsync();\n  log.newLine();\n  log.nested(`  ${u(url)}`);\n  log.newLine();\n  urlOpts.printQRCode(url);\n  const wrap = wordwrap(2, process.stdout.columns || 80);\n  const wrapItem = wordwrap(4, process.stdout.columns || 80);\n  const item = (text: string): string => '  \\u2022 ' + wrapItem(text).trimStart();\n  const iosInfo = process.platform === 'darwin' ? `, or ${b('i')} for iOS simulator` : '';\n  const webInfo = `${b`w`} to run on ${u`w`}eb`;\n  log.nested(wrap(u('To run the app with live reloading, choose one of:')));\n  if (username) {\n    log.nested(\n      item(\n        `Sign in as ${i(\n          '@' + username\n        )} in Expo client on Android or iOS. Your projects will automatically appear in the \"Projects\" tab.`\n      )\n    );\n  }\n  log.nested(item(`Scan the QR code above with the Expo app (Android) or the Camera app (iOS).`));\n  log.nested(item(`Press ${b`a`} for Android emulator${iosInfo}, or ${webInfo}.`));\n  log.nested(item(`Press ${b`e`} to send a link to your phone with email.`));\n  if (!username) {\n    log.nested(item(`Press ${b`s`} to sign in and enable more options.`));\n  }\n\n  Webpack.printConnectionInstructions(projectDir);\n  printHelp();\n};\n\nexport const startAsync = async (projectRoot: string, options: StartOptions) => {\n  const { stdin } = process;\n  const startWaitingForCommand = () => {\n    stdin.setRawMode(true);\n    stdin.resume();\n    stdin.setEncoding('utf8');\n    stdin.on('data', handleKeypress);\n  };\n\n  const stopWaitingForCommand = () => {\n    stdin.removeListener('data', handleKeypress);\n    stdin.setRawMode(false);\n    stdin.resume();\n  };\n\n  startWaitingForCommand();\n\n  Simulator.setInteractiveCallback(async (pause: boolean) => {\n    if (pause) {\n      stopWaitingForCommand();\n    } else {\n      startWaitingForCommand();\n    }\n  });\n\n  Android.setInteractiveCallback(async (pause: boolean) => {\n    if (pause) {\n      stopWaitingForCommand();\n    } else {\n      startWaitingForCommand();\n    }\n  });\n\n  UserManager.setInteractiveAuthenticationCallback(async () => {\n    stopWaitingForCommand();\n    try {\n      return await loginOrRegisterIfLoggedOutAsync();\n    } finally {\n      startWaitingForCommand();\n    }\n  });\n\n  await printServerInfo(projectRoot, options);\n\n  async function handleKeypress(key: string) {\n    if (options.webOnly) {\n      switch (key) {\n        case 'A':\n        case 'a':\n          clearConsole();\n          log('Trying to open the web project in Chrome on Android...');\n          await Android.openWebProjectAsync({\n            projectRoot,\n            shouldPrompt: !options.nonInteractive && key === 'A',\n          });\n          printHelp();\n          break;\n        case 'i':\n        case 'I':\n          clearConsole();\n          log('Trying to open the web project in Safari on the iOS simulator...');\n          await Simulator.openWebProjectAsync({\n            projectRoot,\n            shouldPrompt: !options.nonInteractive && key === 'I',\n            // note(brentvatne): temporarily remove logic for picking the\n            // simulator until we have parity for Android. this also ensures that we\n            // don't interfere with the default user flow until more users have tested\n            // this out.\n            //\n            // If no simulator is booted, then prompt which simulator to use.\n            // (key === 'I' || !(await Simulator.isSimulatorBootedAsync())),\n          });\n          printHelp();\n          break;\n        case 'e':\n          log(chalk.red` \\u203A Sending a URL is not supported in web-only mode`);\n          break;\n      }\n    } else {\n      switch (key) {\n        case 'A':\n          clearConsole();\n          log('Trying to open the project on Android...');\n          await Android.openProjectAsync({ projectRoot, shouldPrompt: true });\n          printHelp();\n          break;\n        case 'a': {\n          clearConsole();\n          log('Trying to open the project on Android...');\n          await Android.openProjectAsync({ projectRoot });\n          printHelp();\n          break;\n        }\n        case 'I':\n          clearConsole();\n          await Simulator.openProjectAsync({\n            projectRoot,\n            shouldPrompt: true,\n          });\n          printHelp();\n          break;\n        case 'i': {\n          clearConsole();\n\n          // note(brentvatne): temporarily remove logic for picking the\n          // simulator until we have parity for Android. this also ensures that we\n          // don't interfere with the default user flow until more users have tested\n          // this out.\n          //\n          // If no simulator is booted, then prompt for which simulator to use.\n          // const shouldPrompt =\n          //   !options.nonInteractive && (key === 'I' || !(await Simulator.isSimulatorBootedAsync()));\n\n          log('Opening in iOS simulator...');\n          await Simulator.openProjectAsync({\n            projectRoot,\n            shouldPrompt: false,\n          });\n          printHelp();\n          break;\n        }\n        case 'e': {\n          stopWaitingForCommand();\n          const lanAddress = await UrlUtils.constructManifestUrlAsync(projectRoot, {\n            hostType: 'lan',\n          });\n          const defaultRecipient = await UserSettings.getAsync('sendTo', null);\n          const rl = readline.createInterface({\n            input: process.stdin,\n            output: process.stdout,\n          });\n          const handleKeypress = (chr: string, key: { name: string }) => {\n            if (key && key.name === 'escape') {\n              cleanup();\n              cancel();\n            }\n          };\n          const cleanup = () => {\n            rl.close();\n            process.stdin.removeListener('keypress', handleKeypress);\n            startWaitingForCommand();\n          };\n          const cancel = async () => {\n            clearConsole();\n            printHelp();\n          };\n          clearConsole();\n          process.stdin.addListener('keypress', handleKeypress);\n          log('Please enter your email address (press ESC to cancel) ');\n          rl.question(\n            defaultRecipient ? `[default: ${defaultRecipient}]> ` : '> ',\n            async sendTo => {\n              cleanup();\n              if (!sendTo && defaultRecipient) {\n                sendTo = defaultRecipient;\n              }\n              sendTo = sendTo && sendTo.trim();\n              if (!sendTo) {\n                cancel();\n                return;\n              }\n              log(`Sending ${lanAddress} to ${sendTo}...`);\n\n              let sent = false;\n              try {\n                await Exp.sendAsync(sendTo, lanAddress);\n                sent = true;\n                log(`Sent link successfully.`);\n              } catch (err) {\n                log(`Could not send link. ${err}`);\n              }\n              printHelp();\n              if (sent) {\n                await UserSettings.setAsync('sendTo', sendTo);\n              }\n            }\n          );\n          break;\n        }\n      }\n    }\n\n    switch (key) {\n      case CTRL_C:\n      case CTRL_D: {\n        // @ts-ignore: Argument of type '\"SIGINT\"' is not assignable to parameter of type '\"disconnect\"'.\n        process.emit('SIGINT');\n        break;\n      }\n      case CTRL_L: {\n        clearConsole();\n        break;\n      }\n      case '?': {\n        await printUsage(projectRoot, options);\n        break;\n      }\n      case 'w': {\n        clearConsole();\n        log('Attempting to open the project in a web browser...');\n        await Webpack.openAsync(projectRoot);\n        await printServerInfo(projectRoot, options);\n        break;\n      }\n      case 'c': {\n        clearConsole();\n        await printServerInfo(projectRoot, options);\n        break;\n      }\n      case 'd': {\n        const { devToolsPort } = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n        log('Opening DevTools in the browser...');\n        openBrowser(`http://localhost:${devToolsPort}`);\n        printHelp();\n        break;\n      }\n      case 'D': {\n        clearConsole();\n        const enabled = !(await UserSettings.getAsync('openDevToolsAtStartup', true));\n        await UserSettings.setAsync('openDevToolsAtStartup', enabled);\n        log(\n          `Automatically opening DevTools ${b(\n            enabled ? 'enabled' : 'disabled'\n          )}.\\nPress ${b`d`} to open DevTools now.`\n        );\n        printHelp();\n        break;\n      }\n      case 'p': {\n        clearConsole();\n        const projectSettings = await ProjectSettings.readAsync(projectRoot);\n        const dev = !projectSettings.dev;\n        await ProjectSettings.setAsync(projectRoot, { dev, minify: !dev });\n        log(\n          `Metro bundler is now running in ${chalk.bold(\n            dev ? 'development' : 'production'\n          )}${chalk.reset(` mode.`)}\nPlease reload the project in the Expo app for the change to take effect.`\n        );\n        printHelp();\n        break;\n      }\n      case 'r':\n      case 'R': {\n        clearConsole();\n        const reset = key === 'R';\n        if (reset) {\n          log('Restarting Metro bundler and clearing cache...');\n        } else {\n          log('Restarting Metro bundler...');\n        }\n        Project.startAsync(projectRoot, { ...options, reset });\n        break;\n      }\n      case 's': {\n        const authSession = await UserManager.getSessionAsync();\n        if (authSession?.accessToken) {\n          log(chalk.yellow('Please remove the EXPO_TOKEN environment var to sign out.'));\n        } else if (authSession?.sessionSecret) {\n          await UserManager.logoutAsync();\n          log('Signed out.');\n        } else {\n          stopWaitingForCommand();\n          try {\n            await loginOrRegisterIfLoggedOutAsync();\n          } catch (e) {\n            log.error(e);\n          } finally {\n            startWaitingForCommand();\n          }\n        }\n        printHelp();\n        break;\n      }\n      case 'o':\n        log('Trying to open the project in your editor...');\n        await startProjectInEditorAsync(projectRoot);\n    }\n  }\n};\n"],"file":"TerminalUI.js"}